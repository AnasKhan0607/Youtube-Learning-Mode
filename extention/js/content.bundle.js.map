{"version":3,"file":"content.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://extention/./components/chatContainer.js","webpack://extention/./components/learningModeToggle.js","webpack://extention/./components/waitForElement.js","webpack://extention/webpack/bootstrap","webpack://extention/webpack/runtime/define property getters","webpack://extention/webpack/runtime/hasOwnProperty shorthand","webpack://extention/webpack/runtime/make namespace object","webpack://extention/./js/content.js"],"sourcesContent":["export function createChatContainer(parentElement, width, height) {\n    const chatContainer = document.createElement('div');\n    chatContainer.id = 'custom-chat-container';\n    chatContainer.style.width = `100%`;\n    chatContainer.style.height = `600px`;\n    chatContainer.style.border = '1px solid rgba(255, 255, 255, 0.1)'; // Light grey border\n    chatContainer.style.borderRadius = '12px';\n    chatContainer.style.overflow = 'hidden';\n    chatContainer.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.3)';\n    chatContainer.style.backgroundColor = '#181818'; // Dark background\n    chatContainer.style.display = 'flex'; // Flexbox to center content\n    chatContainer.style.justifyContent = 'center'; // Center horizontally\n    chatContainer.style.alignItems = 'center'; // Center vertically\n    chatContainer.style.color = '#fff'; // White text color\n    chatContainer.style.fontSize = '14px';\n    chatContainer.style.padding = '10px';\n    chatContainer.style.boxSizing = 'border-box'; // Ensure padding doesn't affect size\n\n    const chatContent = document.createElement('div');\n    chatContent.innerHTML = '<p>Welcome to the Learning Mode Chat!</p>';\n\n    chatContainer.appendChild(chatContent);\n\n    // Append the chat container to the parent element\n    parentElement.appendChild(chatContainer);\n}\n","export function learningModeToggle(toggleLearningMode) {\n    const switchButton = document.createElement('button');\n    switchButton.className = 'ytp-button learning-mode-switch';\n    switchButton.setAttribute('aria-checked', 'false');\n    switchButton.setAttribute('aria-label', 'Learning Mode');\n    switchButton.setAttribute('title', 'Learning Mode');\n\n    const switchContainer = document.createElement('div');\n    switchContainer.className = 'learning-mode-switch-container';\n    switchContainer.style.width = '36px';\n    switchContainer.style.height = '18px';\n    switchContainer.style.backgroundColor = '#ccc';\n    switchContainer.style.borderRadius = '9px';\n    switchContainer.style.position = 'relative';\n    switchContainer.style.cursor = 'pointer';\n    switchContainer.style.transition = 'background-color 0.3s';\n\n    const toggleCircle = document.createElement('div');\n    toggleCircle.className = 'learning-mode-switch-circle';\n    toggleCircle.style.width = '16px';\n    toggleCircle.style.height = '16px';\n    toggleCircle.style.backgroundColor = '#fff';\n    toggleCircle.style.borderRadius = '50%';\n    toggleCircle.style.position = 'absolute';\n    toggleCircle.style.top = '1px';\n    toggleCircle.style.left = '1px';\n    toggleCircle.style.transition = 'left 0.3s';\n\n    switchContainer.appendChild(toggleCircle);\n    switchButton.appendChild(switchContainer);\n\n    switchButton.addEventListener('click', toggleLearningMode);\n\n    return switchButton;\n}\n","export function waitForElement(selector, callback) {\n    const interval = setInterval(() => {\n        const element = document.querySelector(selector);\n        if (element) {\n            clearInterval(interval);\n            callback(element);\n        }\n    }, 100);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { waitForElement } from '../components/waitForElement.js';\nimport { learningModeToggle } from '../components/learningModeToggle.js';\nimport { createChatContainer } from '../components/chatContainer.js';\n\nfunction addButtonToPlayerControls(playerControls) {\n    const toggleButton = learningModeToggle(toggleLearningMode);\n    playerControls.appendChild(toggleButton);\n}\n\nwaitForElement('.ytp-right-controls', addButtonToPlayerControls);\n\nfunction toggleLearningMode() {\n    const switchButton = document.querySelector('.learning-mode-switch');\n    const toggleCircle = document.querySelector('.learning-mode-switch-circle');\n    const isOn = switchButton.getAttribute('aria-checked') === 'true';\n\n    if (!isOn) {\n        switchButton.setAttribute('aria-checked', 'true');\n        switchButton.querySelector('.learning-mode-switch-container').style.backgroundColor = '#3ea6ff';\n        toggleCircle.style.left = '19px';\n        activateLearningMode();\n    } else {\n        switchButton.setAttribute('aria-checked', 'false');\n        switchButton.querySelector('.learning-mode-switch-container').style.backgroundColor = '#ccc';\n        toggleCircle.style.left = '1px';\n        deactivateLearningMode();\n    }\n}\n\nfunction activateLearningMode() {\n    const sidebar = document.getElementById('related');\n    const secondaryInner = document.getElementById('secondary-inner');\n\n    if (sidebar && secondaryInner) {\n        sidebar.style.display = 'none'; // Hide the sidebar\n        createChatContainer(secondaryInner, sidebar.offsetWidth, sidebar.offsetHeight);\n    }\n}\n\nfunction deactivateLearningMode() {\n    const sidebar = document.getElementById('related');\n    const chatContainer = document.getElementById('custom-chat-container');\n    \n    if (sidebar) {\n        sidebar.style.display = ''; // Show the sidebar\n    }\n    if (chatContainer) {\n        chatContainer.remove(); // Remove the chat container\n    }\n}\n"],"names":[],"sourceRoot":""}